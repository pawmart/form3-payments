// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPaymentsParams creates a new GetPaymentsParams object
// no default values defined in spec.
func NewGetPaymentsParams() GetPaymentsParams {

	return GetPaymentsParams{}
}

// GetPaymentsParams contains all the bound params for the get payments operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetPayments
type GetPaymentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Filter by organisation id
	  In: query
	*/
	FilterOrganisationID []strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPaymentsParams() beforehand.
func (o *GetPaymentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qFilterOrganisationID, qhkFilterOrganisationID, _ := qs.GetOK("filter[organisation_id]")
	if err := o.bindFilterOrganisationID(qFilterOrganisationID, qhkFilterOrganisationID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindFilterOrganisationID binds and validates array parameter FilterOrganisationID from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPaymentsParams) bindFilterOrganisationID(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvFilterOrganisationID string
	if len(rawData) > 0 {
		qvFilterOrganisationID = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	filterOrganisationIDIC := swag.SplitByFormat(qvFilterOrganisationID, "")
	if len(filterOrganisationIDIC) == 0 {
		return nil
	}

	var filterOrganisationIDIR []strfmt.UUID
	for i, filterOrganisationIDIV := range filterOrganisationIDIC {
		// items.Format: "uuid"
		value, err := formats.Parse("uuid", filterOrganisationIDIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "filter[organisation_id]", i), "query", "strfmt.UUID", value)
		}
		filterOrganisationIDI := *(value.(*strfmt.UUID))

		if err := validate.FormatOf(fmt.Sprintf("%s.%v", "filter[organisation_id]", i), "query", "uuid", filterOrganisationIDI.String(), formats); err != nil {
			return err
		}
		filterOrganisationIDIR = append(filterOrganisationIDIR, filterOrganisationIDI)
	}

	o.FilterOrganisationID = filterOrganisationIDIR

	return nil
}
