// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/pawmart/form3-payments/models"
)

// PatchPaymentsOKCode is the HTTP code returned for type PatchPaymentsOK
const PatchPaymentsOKCode int = 200

/*PatchPaymentsOK Payment update response

swagger:response patchPaymentsOK
*/
type PatchPaymentsOK struct {
}

// NewPatchPaymentsOK creates PatchPaymentsOK with default headers values
func NewPatchPaymentsOK() *PatchPaymentsOK {

	return &PatchPaymentsOK{}
}

// WriteResponse to the client
func (o *PatchPaymentsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// PatchPaymentsBadRequestCode is the HTTP code returned for type PatchPaymentsBadRequest
const PatchPaymentsBadRequestCode int = 400

/*PatchPaymentsBadRequest Payment update error

swagger:response patchPaymentsBadRequest
*/
type PatchPaymentsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewPatchPaymentsBadRequest creates PatchPaymentsBadRequest with default headers values
func NewPatchPaymentsBadRequest() *PatchPaymentsBadRequest {

	return &PatchPaymentsBadRequest{}
}

// WithPayload adds the payload to the patch payments bad request response
func (o *PatchPaymentsBadRequest) WithPayload(payload *models.APIError) *PatchPaymentsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch payments bad request response
func (o *PatchPaymentsBadRequest) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchPaymentsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchPaymentsNotFoundCode is the HTTP code returned for type PatchPaymentsNotFound
const PatchPaymentsNotFoundCode int = 404

/*PatchPaymentsNotFound Payment update not found

swagger:response patchPaymentsNotFound
*/
type PatchPaymentsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewPatchPaymentsNotFound creates PatchPaymentsNotFound with default headers values
func NewPatchPaymentsNotFound() *PatchPaymentsNotFound {

	return &PatchPaymentsNotFound{}
}

// WithPayload adds the payload to the patch payments not found response
func (o *PatchPaymentsNotFound) WithPayload(payload *models.APIError) *PatchPaymentsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch payments not found response
func (o *PatchPaymentsNotFound) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchPaymentsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchPaymentsInternalServerErrorCode is the HTTP code returned for type PatchPaymentsInternalServerError
const PatchPaymentsInternalServerErrorCode int = 500

/*PatchPaymentsInternalServerError Fatal error

swagger:response patchPaymentsInternalServerError
*/
type PatchPaymentsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewPatchPaymentsInternalServerError creates PatchPaymentsInternalServerError with default headers values
func NewPatchPaymentsInternalServerError() *PatchPaymentsInternalServerError {

	return &PatchPaymentsInternalServerError{}
}

// WithPayload adds the payload to the patch payments internal server error response
func (o *PatchPaymentsInternalServerError) WithPayload(payload *models.APIError) *PatchPaymentsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch payments internal server error response
func (o *PatchPaymentsInternalServerError) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchPaymentsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
